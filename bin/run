#!/usr/bin/env ruby
# $DEBUG = true

require "paint"
require "lapidar"
require_relative "../lib/game"
require_relative "../lib/player"
require_relative "../lib/turn"
require_relative "../lib/tools"

Thread.abort_on_exception = true

# Setup latest game and retrieve the relevant turns from the blockchain starting from an offset
def load_last_game_from_blocks(main_chain_blocks)
  turns_per_game = 50 * 50
  last_game_offset = turns_per_game * (main_chain_blocks.size / turns_per_game)
  blocks_of_last_game = main_chain_blocks[last_game_offset..-1].clone

  # Replay all blocks of the last game
  last_game = Game.new(width: 50, height: 50)
  blocks_of_last_game.each { |block| last_game.submit(Turn.from_str(block.data)) }
  last_game
end

puts "Starting Lapidar blockchain runner…"
lapidar = Lapidar.runner(host: '0.0.0.0', port: 9999, neighbors: [
  { host: "127.0.0.1", port: 9998 }
])
blockchain_thread = Thread.new { lapidar.start }

# Log game to console every second
logger_thread = periodically_sleeping_thread(1) do
  system("clear")
  current_game = load_last_game_from_blocks(lapidar.chain.blocks)
  puts current_game.grid.to_colorful_string
end

# Inquire all neighbors for blockchain blocks every 10 seconds
inquiry_thread = periodically_sleeping_thread(10) { lapidar.buschtelefon_endpoint.inquire_remote_neighbors }

trap "SIGINT" do
  puts "Shutting down…"
  inquiry_thread.exit
  lapidar.stop
  logger_thread.exit
end

my_player = Player.new

loop do
  # From a series of games take the latest/currently played one
  current_game = load_last_game_from_blocks(lapidar.chain.blocks)

  # Come up with a new turn to play
  my_turn = my_player.produce_turn(current_game)

  # Submit my turn to the miner and the blockchain
  lapidar.punch_queue << my_turn.to_s
end

inquiry_thread.join
blockchain_thread.join
logger_thread.join
